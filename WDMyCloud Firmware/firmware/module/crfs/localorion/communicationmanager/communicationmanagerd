#!/bin/bash
#
# Control script for Communication Manager
#
# Command-line switches
#	-startup    starts Communication Manager if the saved state is 'enabled'
#	-shutdown   stops Communication Manager if it is running
#	-enable 	enables Communication Manager (default) and starts it if not running
# 	-disable	disables Communication Manager. Communication Manager is stopped if it is running
#               Communication Manager will not start again until this script is called with -enable
# Update:
#	10/25/10 - created: Joe Sapsford
#   10/28/10 - now gets communicationmanager PID from PID file in /tmp/orion_cm_pid
#	10/29/10 - changed use of awk to sed as WDTV awk implementation causes seg fault
#   11/05/10 - fixed console hang when startup option is used
#   11/06/10 - added command line switches to turn file and/or console logging on or off
#   12/10/10 - set file logging on by default for QA as per Anu's request
#   12/11/10 - added full path for CM executable so script can be run from any directory 
#    2/15/11 - modified to run on 3G with Debian
#    3/18/11 - removed for loops for input param parsing, only checking for $1 
#			   $1 is always startup/shutdown/enable/disable state and $2 is always logging param
#	 4/07/11 - changed paths for files that were stored in /tmp to /CacheVolume/.orion
#	 8/19/11 - added version number to status output
#	11/03/11 - Created Bali version: uses /usr/local/orion path instead of /usr/orion
#	03/16/12 - added kill logic of being vpn client connection
#	07/15/2014 - Turn on logging to file by default and set severity to LOG_NOTICE (5)
#	07/17/2014 - Add support for MyBookLive device
#	07/18/2014 - Set logging severity level to LOG_NOTICE or LOG_INFO according to the user specified 
#                setting returned by isEnhancedLoggingEnabled.sh script, 0 or 1 respectively. This
#                setting can be overridden by the communicationmanagerd command line option,
#                for example: communicationmanagerd start logtofile 3.
#	10/10/2014 - Add dnscheckinterval support, modified options processing.
#	12/30/2014 - Add portmaplifetime support, modified options processing.

ROOT_UID=0     # Only users with $UID 0 have root privileges.
E_NOTROOT=87   # Non-root exit error

CM_LOG_FILE="/var/log/orion_cm.log"
CM_PID_FILE="/tmp/orion_cm_pid"
CM_WATCHDOG_PATH="/usr/local/orion/communicationmanager/comm_mgr_wd.sh"
CM_FILE_PATH="/usr/local/orion/communicationmanager/communicationmanager"
CM_LIBS="/usr/local/orion/communicationmanager/lib:/usr/lib:/usr/local/lib"
ENABLED="0"
CMPID=0
PIDS=0
LOG_SWITCH='-l'
DNS_CHECK_SWITCH=""
DNS_CHECK_INTERVAL=""
PORTMAP_LIFETIME_SWITCH=""
PORTMAP_LIFETIME_INTERVAL=""
PIP_CHECK_SWITCH=""
PIP_CHECK_INTERVAL=""

# Handle product differences here
# Path to globalconfig.ini - change this for WDTV
if [ -f /var/www/Admin/webapp/config/globalconfig.ini ]; then
	# MyBookLive
	ENABLE_STATE_FILE="/CacheVolume/.orion/orion_cm_enabled"
	ORION_STATIC_CONFIG="/var/www/Admin/webapp/config/globalconfig.ini"
else
	# Products that are NOT MyBookLive
	ENABLE_STATE_FILE="/CacheVolume/orion_cm_enabled"
	ORION_STATIC_CONFIG="/var/www/rest-api/config/globalconfig.ini"
fi
export ORION_STATIC_CONFIG

# syslog severity levels: LOG_EMERG 0, LOG_ALERT 1, LOG_CRIT 2, LOG_ERR 3, LOG_WARNING 4, LOG_NOTICE 5, LOG_INFO 6, LOG_DEBUG 7
LOG_SEVERITY=5
EXTENDED_LOGGING_SETTING_SCRIPT="/usr/sbin/isEnhancedLoggingEnabled.sh"

###################################
#
# Get list of PIDs for a process name
#
# $1 == process name
# return - sets $PIDS to list of PIDs matching process, 
#          or $PIDS empty if no match.
###################################
get_process_pids() {                                                                                                           
    PIDS=""                                                                                                                    
    PIDS=`pidof "$1"`                                                                                                          
    retstat=$?                                                                                                                 
    if [ $retstat -ne 0 ]; then                                                                                                
        if [ ! -f /bin/busybox ]; then                                                                                         
                PIDS=`pidof -x "$1"`                                                                                           
        fi                                                                                                                     
     fi                                                                                                                        
}                                                                                                                              
         

###################################
#
# Get user specified extended logging setting.
#
###################################
get_extended_logging_setting()
{
	# Check if extended logging setting script exists and is executable.
	if [ -x "$EXTENDED_LOGGING_SETTING_SCRIPT" ] ; then
		$EXTENDED_LOGGING_SETTING_SCRIPT > /dev/null
		return $?
	else
		# Default extended logging setting to disabled.
		return 0
	fi
}

###################################
#
# Set comm mgr PID from PID file, if it exists, else set it to 0
#
###################################
get_cm_pid()
{
	if [ -f "$CM_PID_FILE" ]
	then
		CMPID=`cat $CM_PID_FILE` 
	else
		CMPID=0
	fi
	return 0
}

###################################                                                                         
# Kill VPN process                                            
###################################                                                                         
kill_vpn_client() {
  get_process_pids "openvpn.bin" 
  #if running on sequoia, openvpn process is 'openvpn'
  if [ "$PIDS" = "" ] 
  then
   	get_process_pids "openvpn"
  fi
       	
  for runpid in $PIDS
  do
        `kill -15 $runpid`
        echo "`date` - %I - openvpn - Stop"
  done
}

###################################                                                                         
# Kill watchdog process
###################################                                                                         
kill_watchdog() {
  get_process_pids "comm_mgr_wd.sh"
  
  for runpid in $PIDS
  do
        `kill -15 $runpid`
        echo "`date` - %I - comm_mgr_wd.sh - Stop"
  done
}

###################################
#
# Checks that script is being run as root and that Communication Manager 
# is installed.
#
###################################
validate_environment()
{
  # script must be run as root
  if [ "$UID" -ne "$ROOT_UID" ]
  then
    echo "`date` - %E - communicationmanager - script must be run as root"
    exit $E_NOTROOT
  fi  

  # make sure Communication Manager exists
  
  if [ "$COMM_MGR_PATH" != '' ]
  then
  	CM_FILE_PATH=$COMM_MGR_PATH
  fi
  
  if [ -f "$CM_FILE_PATH" ]
  then
  	if [ -f "$ENABLE_STATE_FILE" ]
  	then
  		ENABLED=`cat $ENABLE_STATE_FILE`
  	else
  		ENABLED="0"
  	fi
  else
	echo "`date` - %E - CommunicationManager - executable file not found, exiting"
	exit 0
  fi
  return 0
}

###################################
#
# Start communication manager if it is not already running
# Do NOT start a watchdog process
#
###################################
nowdstart_comm_mgr()
{
  renice 0 -p $$ >> /dev/null

  if [ "$ENABLED" != "1" ]
  then
    echo "`date` - %W - Communication Manager - startup is disabled, use 'enable' to start process"
  	return 1
  fi
 
  get_cm_pid
  get_process_pids "communicationmanager"

  # if there are > 1 Comm Mgr processes running, stop all processes that do not have the stored PID
   
   local ISRUNNING="no"
   
   for runpid in $PIDS
   do
        if [ "$runpid" != "$CMPID" ]
        then
            `kill -15 $runpid`
            echo "`date` - %I - additional communicationmanager instance - Stop"    
        else
            local ISRUNNING="yes"    
        fi
   done
   
   if [ "$ISRUNNING" = "yes" ]
   then
		echo "`date` - %W - Communication Manager - already running, use 'shutdown' to stop process"
   else 
	  echo "`date` - %I - Communication Manager - Start"
  	  nice -n 10 $CM_FILE_PATH -f 120 $LOG_SWITCH $LOG_SEVERITY $DNS_CHECK_SWITCH $DNS_CHECK_INTERVAL $PORTMAP_LIFETIME_SWITCH $PORTMAP_LIFETIME_INTERVAL $PIP_CHECK_SWITCH $PIP_CHECK_INTERVAL
   fi
   return 0
}

###################################
#
# Start watchdog process if it's not running
#
###################################
start_watchdog()
{
  if [ -x $CM_WATCHDOG_PATH ]; then
    ps awx | grep "comm_mgr_wd.sh" | grep -v "grep" >/dev/null
    if [ $? -ne 0 ]; then
      nice -n 10 $CM_WATCHDOG_PATH 60 &
    fi
  fi
}

###################################
#
# Start communication manager if it is not already running
# Start a watchdog process
#
###################################
start_comm_mgr()
{
  nowdstart_comm_mgr
  nowdstart_status=$?
  if [ $nowdstart_status -eq 0 ]; then
    start_watchdog
  fi
}

###################################
#
# Stop communication manager if it is running
#
###################################\
stop_comm_mgr()
{
  
  kill_vpn_client
  kill_watchdog

  get_cm_pid 
  get_process_pids "communicationmanager"	  
  for runpid in $PIDS
  do
		`kill -15 $runpid`
		echo "`date` - %I - Communication Manager - Stop"
  done
  
  echo "`date` - %W - Communication Manager - process is not running"
  return 0
}

###################################
#
# Enable Communication manager and start it
#
###################################
enable_comm_mgr()
{
  echo "1" > $ENABLE_STATE_FILE
  ENABLED="1"
  echo "`date` - %I - Communication Manager - Enabled"
	
  start_comm_mgr
  return 0
}

###################################
#
# Disable communication manager - stops process if is running
# and prevents it from being started until it is enabled again
#
###################################
disable_comm_mgr()
{
  echo "0" > $ENABLE_STATE_FILE
  ENABLED="0"
  echo "`date` - %I - Communication Manager - Disabled"
  stop_comm_mgr
  
  #wait until CM process has exited
  trysleft=60
  get_cm_pid
  while [ $trysleft -gt 0 ]
	do
	    running="0"
        get_process_pids "communicationmanager"      
   		              
  		for runpid in $PIDS
  		do
  			if [ "$runpid" = "$CMPID" ]
  				then
  				running="1"
				break
  			fi
	    done 

	  	if [ "$running" = "1" ]
	  	then
		  	sleep 1
		  	trysleft=$(( $trysleft - 1 ))
		else
			break
		fi
    done
  
  # run CM once with -u switch to un-map ports
  $CM_FILE_PATH -u $LOG_SWITCH $LOG_SEVERITY $DNS_CHECK_SWITCH $DNS_CHECK_INTERVAL $PORTMAP_LIFETIME_SWITCH $PORTMAP_LIFETIME_INTERVAL $PIP_CHECK_SWITCH $PIP_CHECK_INTERVAL
  return 0
}

###################################
#
# Echo comm mgr status
#
###################################
comm_mgr_status()
{
  $CM_FILE_PATH -v
  get_cm_pid
  get_process_pids "communicationmanager"      
  
  for runpid in $PIDS
  do
  	if [ "$runpid" = "$CMPID" ]
  	then
		echo "running"
  		return 0
  	fi
  done
  echo "not running"
  return 0
}

###################################
#
# Start of Script
#
###################################

VALID_CM=0

if [ -z "$LD_LIBRARY_PATH" ] ; then
   LD_LIBRARY_PATH=${CM_LIBS}
else
   LD_LIBRARY_PATH="${CM_LIBS}:${LD_LIBRARY_PATH}"
fi
export LD_LIBRARY_PATH

CMD_TASK=""

while [ $# -gt 0 ]; do
  case $1 in
	-path)
		if [ "$2" ]; then
			COMM_MGR_PATH=$2
			`export COMM_MGR_PATH=$COMM_MGR_PATH`
			shift
		else
			echo 'Must specify Comm Manager binary file path'
			exit 1
		fi
		;;
	-logtofile|logtofile)
		LOG_SWITCH='-l'
		if [ "$2" ]; then
			if [[ $2 =~ ^[0-9]+$ ]]; then
				# Override user specified severity level with command line specified level.
				LOG_SEVERITY=$2
				shift
			fi
		fi
		;;
	-logtoconsole|logtoconsole)
		LOG_SWITCH='-lc'
		if [ "$2" ]; then
			if [[ $2 =~ ^[0-9]+$ ]]; then
				# Override user specified severity level with command line specified level.
				LOG_SEVERITY=$2
				shift
			fi
		fi
		;;
	-dnscheckinterval|dnscheckinterval)
		if [ "$2" ]; then
			if [[ $2 =~ ^[0-9]+$ ]]; then
				DNS_CHECK_SWITCH="-d"
				DNS_CHECK_INTERVAL="$2"
				shift
			fi
		fi
		;;
	-portmaplifetime|portmaplifetime)
		if [ "$2" ]; then
			if [[ $2 =~ ^[0-9]+$ ]]; then
				PORTMAP_LIFETIME_SWITCH="-t"
				PORTMAP_LIFETIME_INTERVAL="$2"
				shift
			fi
		fi
		;;
	-publicipcheckinterval|publicipcheckinterval)
		if [ "$2" ]; then
			if [[ $2 =~ ^[0-9]+$ ]]; then
				PIP_CHECK_SWITCH="-p"
				PIP_CHECK_INTERVAL="$2"
				shift
			fi
		fi
		;;
	*)
# JS - do not assign parameter to CMD_TASK if it is empty
# REST-API PHP code passes an empty second parameter which causes this script to fail if we don't ignore it
	    if [ "$1" ]; then
		  CMD_TASK=$1
		fi
		;;
  esac

  shift
done

validate_environment

# Get user specified extended logging setting.
get_extended_logging_setting
if [ 1 -eq $? ] ; then
	# Want log level of at least 6
	if [ $LOG_SEVERITY -lt 6 ]; then
		LOG_SEVERITY=6
	fi
fi
 
case "$CMD_TASK" in 
	-enable)
		enable_comm_mgr
		VALID_CM=1
		;;
	enable)
		enable_comm_mgr
		VALID_CM=1
		;;
	-disable)
		disable_comm_mgr
		VALID_CM=1
		;;
	disable)
		disable_comm_mgr
		VALID_CM=1
		;;
	-startup)
		start_comm_mgr
		VALID_CM=1
		;;
	startup)
		start_comm_mgr
		VALID_CM=1
		;;
	-start)
		start_comm_mgr
		VALID_CM=1
		;;
	start)
		start_comm_mgr
		VALID_CM=1
		;;
	-nowdstart)
		nowdstart_comm_mgr
		VALID_CM=1
		;;
	nowdstart)
		nowdstart_comm_mgr
		VALID_CM=1
		;;
	-shutdown)
		stop_comm_mgr
		VALID_CM=1
		;;
	shutdown)
		stop_comm_mgr
		VALID_CM=1
		;;
	-stop)
		stop_comm_mgr
		VALID_CM=1
		exit 0
		;;
	stop)
		stop_comm_mgr
		VALID_CM=1
		;;
	-status)
		comm_mgr_status
		VALID_CM=1
		;;
	status)
		comm_mgr_status
		VALID_CM=1
		;;
	*)
esac

if [ "$VALID_CM" -eq 0 ] 
then
	echo "CommunicationManager invalid option(s): $@"
	echo "usage: communicationmanagerd {-path (comm mgr file path)|-logtofile (loglevel)|-logtoconsole (loglevel)|-dnscheckinterval (interval_in_secs)|startup|shutdown|enable|disable|status}"
	exit 1
fi


exit 0
  
